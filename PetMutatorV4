-- Pet Mutator V3 - Full Script with Fixes

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

local mutationData = {
	Golden     = { Prefix = "Golden ", Color = Color3.fromRGB(255, 215, 0) },
	Shiny      = { Prefix = "Shiny ", Color = Color3.fromRGB(0, 255, 255) },
	Rainbow    = { Prefix = "Rainbow ", Color = Color3.fromRGB(255, 0, 255) },
	Mega       = { Prefix = "Mega ", Color = nil },
	Tiny       = { Prefix = "Tiny ", Color = Color3.fromRGB(150, 150, 150) },
	Tranquil   = { Prefix = "Tranquil ", Color = Color3.fromRGB(100, 200, 255) },
	Corrupted  = { Prefix = "Corrupted ", Color = Color3.fromRGB(80, 0, 120) },
	Frozen     = { Prefix = "Frozen ", Color = Color3.fromRGB(150, 200, 255) },
	Windy      = { Prefix = "Windy ", Color = Color3.fromRGB(170, 255, 200) },
	IronSkin   = { Prefix = "IronSkin ", Color = Color3.fromRGB(120, 120, 120) },
	Radiant    = { Prefix = "Radiant ", Color = Color3.fromRGB(255, 255, 0) },
	Shocked    = { Prefix = "Shocked ", Color = Color3.fromRGB(255, 255, 150) },
	Ascended   = { Prefix = "Ascended ", Color = Color3.fromRGB(255, 255, 255) },
}

local particleIDs = {
	Windy     = "241594314",
	Shocked   = "243660364",
	Ascended  = "348257799",
	Rainbow   = "6878509945",
	Corrupted = "569507469",
	Radiant   = "569507523",
}

local selected = nil

local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
screenGui.Name = "PetMutatorUI"
screenGui.ResetOnSpawn = false

local mainFrame = Instance.new("Frame", screenGui)
mainFrame.Size = UDim2.new(0, 300, 0, 220)
mainFrame.Position = UDim2.new(0.5, -150, 0.3, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
mainFrame.Active = true
mainFrame.Draggable = true
Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0, 8)

local title = Instance.new("TextLabel", mainFrame)
title.Size = UDim2.new(1, 0, 0, 40)
title.Text = "Bacon Scripts\nPET MUTATOR"
title.Font = Enum.Font.SourceSansBold
title.TextSize = 18
title.TextColor3 = Color3.new(1, 1, 1)
title.BackgroundTransparency = 1

local mutateButton = Instance.new("TextButton", mainFrame)
mutateButton.Size = UDim2.new(1, -20, 0, 30)
mutateButton.Position = UDim2.new(0, 10, 0, 45)
mutateButton.Text = "Mutate Pet"
mutateButton.Font = Enum.Font.SourceSansBold
mutateButton.TextSize = 18
mutateButton.BackgroundColor3 = Color3.fromRGB(90, 90, 90)
mutateButton.TextColor3 = Color3.new(1, 1, 1)

local dropdownButton = Instance.new("TextButton", mainFrame)
dropdownButton.Size = UDim2.new(1, -20, 0, 25)
dropdownButton.Position = UDim2.new(0, 10, 0, 85)
dropdownButton.Text = "Choose Mutation ▼"
dropdownButton.Font = Enum.Font.SourceSans
dropdownButton.TextSize = 16
dropdownButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
dropdownButton.TextColor3 = Color3.new(1, 1, 1)

local scrollFrame = Instance.new("ScrollingFrame", mainFrame)
scrollFrame.Size = UDim2.new(1, -20, 0, 90)
scrollFrame.Position = UDim2.new(0, 10, 0, 115)
scrollFrame.CanvasSize = UDim2.new(0, 0, 0, #mutationData * 26)
scrollFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
scrollFrame.BorderSizePixel = 0
scrollFrame.ScrollBarThickness = 5
scrollFrame.Visible = false
Instance.new("UICorner", scrollFrame).CornerRadius = UDim.new(0, 4)

local uiList = Instance.new("UIListLayout", scrollFrame)
uiList.Padding = UDim.new(0, 2)

local statusLabel = Instance.new("TextLabel", mainFrame)
statusLabel.Size = UDim2.new(1, -20, 0, 25)
statusLabel.Position = UDim2.new(0, 10, 1, -30)
statusLabel.Text = "Status: Waiting..."
statusLabel.Font = Enum.Font.SourceSans
statusLabel.TextSize = 16
statusLabel.TextColor3 = Color3.new(1, 1, 1)
statusLabel.BackgroundTransparency = 1

-- Dropdown logic
dropdownButton.MouseButton1Click:Connect(function()
	scrollFrame.Visible = not scrollFrame.Visible
	dropdownButton.Text = scrollFrame.Visible and "Choose Mutation ▲" or "Choose Mutation ▼"
end)

for name, _ in pairs(mutationData) do
	local btn = Instance.new("TextButton", scrollFrame)
	btn.Size = UDim2.new(1, 0, 0, 24)
	btn.Text = name
	btn.Font = Enum.Font.SourceSans
	btn.TextSize = 16
	btn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
	btn.TextColor3 = Color3.new(1, 1, 1)
	btn.MouseButton1Click:Connect(function()
		selected = name
		dropdownButton.Text = "Selected: " .. name
		scrollFrame.Visible = false
	end)
end

-- Helpers
local function getHeldPet()
	local char = player.Character
	if not char then return nil end
	for _, tool in ipairs(char:GetChildren()) do
		if tool:IsA("Tool") then
			return tool
		end
	end
end

local function addParticleEffect(pet, mutation)
	local assetId = particleIDs[mutation]
	if not assetId then return end
	for _, part in ipairs(pet:GetDescendants()) do
		if part:IsA("BasePart") then
			local emitter = Instance.new("ParticleEmitter")
			emitter.Texture = "rbxassetid://" .. assetId
			emitter.Rate = 20
			emitter.Lifetime = NumberRange.new(1, 1.5)
			emitter.Speed = NumberRange.new(0.5, 1)
			emitter.LightEmission = 1
			emitter.Size = NumberSequence.new(1)
			emitter.Color = ColorSequence.new(Color3.new(1,1,1))
			emitter.Parent = part
		end
	end
end

local function scaleModel(pet, factor)
	for _, part in ipairs(pet:GetDescendants()) do
		if part:IsA("BasePart") then
			part.Size *= factor
		elseif part:IsA("SpecialMesh") then
			part.Scale *= factor
		end
	end
end

local function applyStoredMutation(pet)
	local mutation = pet:GetAttribute("MutationType")
	if not mutation or not mutationData[mutation] then return end
	local data = mutationData[mutation]
	if data.Color then
		for _, p in ipairs(pet:GetDescendants()) do
			if p:IsA("BasePart") then
				p.Color = data.Color
				p.Material = Enum.Material.Neon
			end
		end
	end
	if mutation == "Mega" then
		scaleModel(pet, 1.5)
	end
	addParticleEffect(pet, mutation)
end

-- Mutation Button
mutateButton.MouseButton1Click:Connect(function()
	local pet = getHeldPet()
	if not pet then
		statusLabel.Text = "Status: No pet held!"
		return
	end
	if not selected then
		statusLabel.Text = "Status: No mutation selected!"
		return
	end

	local data = mutationData[selected]
	pet.Name = data.Prefix .. pet.Name:gsub("^%w+ ", "")
	pet:SetAttribute("MutationType", selected)
	applyStoredMutation(pet)
	statusLabel.Text = "Status: Applied " .. selected
end)

-- Mutation Tracker
RunService.Heartbeat:Connect(function()
	for _, pet in ipairs(workspace:GetDescendants()) do
		if pet:IsA("Model") and pet:GetAttribute("MutationType") and not pet:GetAttribute("HasAppliedMutation") then
			pet:SetAttribute("HasAppliedMutation", true)
			applyStoredMutation(pet)
		end
	end

	local held = getHeldPet()
	if held then
		statusLabel.Text = "Status: Holding pet: " .. held.Name
	end
end)
