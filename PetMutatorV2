local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

-- Mutation definitions
local mutationData = {
    Golden     = { Prefix = "Golden ", Color = Color3.fromRGB(255, 195, 0) }, -- improved gold color
    Shiny      = { Prefix = "Shiny ", Color = Color3.fromRGB(0, 255, 255) },
    Rainbow    = { Prefix = "Rainbow ", Color = Color3.fromRGB(255, 0, 255) },
    Mega       = { Prefix = "Mega ", Color = Color3.fromRGB(255, 100, 100) },
    Tiny       = { Prefix = "Tiny ", Color = Color3.fromRGB(150, 150, 150) },
    Tranquil   = { Prefix = "Tranquil ", Color = Color3.fromRGB(100, 200, 255) },
    Corrupted  = { Prefix = "Corrupted ", Color = Color3.fromRGB(80, 0, 120) },
    -- Inverted removed
    Frozen     = { Prefix = "Frozen ", Color = Color3.fromRGB(150, 200, 255) },
    Windy      = { Prefix = "Windy ", Color = Color3.fromRGB(170, 255, 200) },
    IronSkin   = { Prefix = "IronSkin ", Color = Color3.fromRGB(120, 120, 120) },
    Radiant    = { Prefix = "Radiant ", Color = Color3.fromRGB(255, 255, 0) },
    Shocked    = { Prefix = "Shocked ", Color = Color3.fromRGB(255, 255, 150) },
    Ascended   = { Prefix = "Ascended ", Color = Color3.fromRGB(255, 255, 255) },
}

local selected = nil

-- GUI Setup
local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
screenGui.Name = "PetMutatorUI"
screenGui.ResetOnSpawn = false

local mainFrame = Instance.new("Frame", screenGui)
mainFrame.Size = UDim2.new(0, 300, 0, 260) -- shorter height
mainFrame.Position = UDim2.new(0.5, -150, 0.3, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
mainFrame.Active = true
mainFrame.Draggable = true
Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0, 8)

local title = Instance.new("TextLabel", mainFrame)
title.Size = UDim2.new(1, 0, 0, 50)
title.Text = "Bacon Scripts\nPET MUTATOR"
title.Font = Enum.Font.SourceSansBold
title.TextSize = 20
title.TextColor3 = Color3.new(1, 1, 1)
title.BackgroundTransparency = 1

-- Dropdown Label (acts as dropdown button)
local dropdownLabel = Instance.new("TextButton", mainFrame)
dropdownLabel.Size = UDim2.new(1, -20, 0, 30)
dropdownLabel.Position = UDim2.new(0, 10, 0, 60)
dropdownLabel.Text = "Selected: None ▼"
dropdownLabel.Font = Enum.Font.SourceSans
dropdownLabel.TextSize = 16
dropdownLabel.TextColor3 = Color3.new(1, 1, 1)
dropdownLabel.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
dropdownLabel.AutoButtonColor = true

-- Dropdown Frame (hidden by default)
local dropdownFrame = Instance.new("Frame", mainFrame)
dropdownFrame.Size = UDim2.new(1, -20, 0, 120) -- shorter dropdown height
dropdownFrame.Position = UDim2.new(0, 10, 0, 90)
dropdownFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
dropdownFrame.Visible = false
dropdownFrame.ClipsDescendants = true
Instance.new("UICorner", dropdownFrame).CornerRadius = UDim.new(0, 6)

-- Scroll frame inside dropdown
local scrollFrame = Instance.new("ScrollingFrame", dropdownFrame)
scrollFrame.Size = UDim2.new(1, 0, 1, 0)
scrollFrame.Position = UDim2.new(0, 0, 0, 0)
scrollFrame.BackgroundTransparency = 1
scrollFrame.BorderSizePixel = 0
scrollFrame.ScrollBarThickness = 8
scrollFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y

local uiList = Instance.new("UIListLayout", scrollFrame)
uiList.Padding = UDim.new(0, 4)
uiList.SortOrder = Enum.SortOrder.LayoutOrder

-- Populate dropdown with mutations except Inverted
for name, _ in pairs(mutationData) do
    if name ~= "Inverted" then
        local btn = Instance.new("TextButton", scrollFrame)
        btn.Size = UDim2.new(1, -10, 0, 28)
        btn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
        btn.TextColor3 = Color3.new(1, 1, 1)
        btn.Font = Enum.Font.SourceSans
        btn.TextSize = 16
        btn.Text = name
        btn.AutoButtonColor = true
        btn.LayoutOrder = #scrollFrame:GetChildren() -- keeps order

        btn.MouseButton1Click:Connect(function()
            selected = name
            dropdownLabel.Text = "Selected: " .. name .. " ▼"
            dropdownFrame.Visible = false
        end)
    end
end

-- Toggle dropdown visibility when dropdownLabel clicked
dropdownLabel.MouseButton1Click:Connect(function()
    dropdownFrame.Visible = not dropdownFrame.Visible
end)

local mutateButton = Instance.new("TextButton", mainFrame)
mutateButton.Size = UDim2.new(1, -20, 0, 35)
mutateButton.Position = UDim2.new(0, 10, 1, -55)
mutateButton.Text = "Click to Mutate Pet"
mutateButton.Font = Enum.Font.SourceSansBold
mutateButton.TextSize = 18
mutateButton.BackgroundColor3 = Color3.fromRGB(90, 90, 90)
mutateButton.TextColor3 = Color3.new(1, 1, 1)

local statusLabel = Instance.new("TextLabel", mainFrame)
statusLabel.Size = UDim2.new(1, -20, 0, 25)
statusLabel.Position = UDim2.new(0, 10, 1, -25)
statusLabel.Text = "Status: Waiting..."
statusLabel.Font = Enum.Font.SourceSans
statusLabel.TextSize = 16
statusLabel.TextColor3 = Color3.new(1, 1, 1)
statusLabel.BackgroundTransparency = 1

-- Pet Detection
local function getHeldPet()
    local char = player.Character
    if not char then return nil end

    -- Check for Tool
    for _, tool in ipairs(char:GetChildren()) do
        if tool:IsA("Tool") then
            return tool
        end
    end

    -- Check for welded or nearby Models (optional)
    for _, obj in ipairs(workspace:GetChildren()) do
        if obj:IsA("Model") and obj:FindFirstChildWhichIsA("BasePart") then
            if obj:FindFirstChild(player.Name) or obj.Name:lower():find("bee") then
                local part = obj:FindFirstChildWhichIsA("BasePart")
                if (part.Position - char.PrimaryPart.Position).Magnitude < 10 then
                    return obj
                end
            end
        end
    end

    return nil
end

-- Mutation Logic helper to clear old golden effects
local function clearGoldenEffects(pet)
    for _, part in ipairs(pet:GetDescendants()) do
        if part:IsA("BasePart") then
            local light = part:FindFirstChild("GoldenLight")
            if light then light:Destroy() end
            local sparkles = part:FindFirstChild("GoldenSparkles")
            if sparkles then sparkles:Destroy() end
        end
    end
end

mutateButton.MouseButton1Click:Connect(function()
    local pet = getHeldPet()
    if not pet then
        statusLabel.Text = "Status: No pet held!"
        return
    end
    if not selected then
        statusLabel.Text = "Status: No mutation selected!"
        return
    end
    local data = mutationData[selected]
    if data then
        -- Rename pet removing previous prefix if any
        pet.Name = data.Prefix .. pet.Name:gsub("^%w+ ", "")

        -- Clear previous golden effects first if any
        clearGoldenEffects(pet)

        for _, p in ipairs(pet:GetDescendants()) do
            if p:IsA("BasePart") then
                -- Reset reflectance/material for non-golden
                p.Reflectance = 0
                p.Material = Enum.Material.Plastic

                -- Apply mutation color and material effects
                if selected == "Golden" then
                    p.Color = Color3.fromRGB(255, 195, 0)
                    p.Material = Enum.Material.Metal
                    p.Reflectance = 0.6

                    -- Add glow light
                    if not p:FindFirstChild("GoldenLight") then
                        local light = Instance.new("PointLight")
                        light.Name = "GoldenLight"
                        light.Range = 8
                        light.Brightness = 3
                        light.Color = Color3.fromRGB(255, 215, 0)
                        light.Shadows = true
                        light.Parent = p
                    end

                    -- Add sparkle particles
                    if not p:FindFirstChild("GoldenSparkles") then
                        local sparkles = Instance.new("ParticleEmitter")
                        sparkles.Name = "GoldenSparkles"
                        sparkles.Texture = "rbxassetid://26356436"
                        sparkles.Color = ColorSequence.new(Color3.fromRGB(255, 215, 0))
                        sparkles.LightEmission = 1
                        sparkles.Rate = 10
                        sparkles.Lifetime = NumberRange.new(0.5, 1)
                        sparkles.Speed = NumberRange.new(0.5, 1)
                        sparkles.Rotation = NumberRange.new(0, 360)
                        sparkles.RotSpeed = NumberRange.new(-180, 180)
                        sparkles.Size = NumberSequence.new{
                            NumberSequenceKeypoint.new(0, 0.5),
                            NumberSequenceKeypoint.new(1, 0)
                        }
                        sparkles.Parent = p
                    end

                elseif selected == "Shiny" then
                    p.Color = data.Color
                    p.Material = Enum.Material.Neon
                    p.Reflectance = 0.3

                elseif selected == "Frozen" then
                    p.Color = data.Color
                    p.Material = Enum.Material.Ice
                    p.Reflectance = 0.3

                elseif selected == "Windy" then
                    p.Color = data.Color
                    p.Material = Enum.Material.ForceField
                    p.Reflectance = 0.2

                elseif selected == "Corrupted" then
                    p.Color = data.Color
                    p.Material = Enum.Material.SmoothPlastic
                    p.Reflectance = 0.2

                elseif selected == "Mega" then
                    p.Color = data.Color
                    p.Material = Enum.Material.Metal
                    p.Reflectance = 0.4

                elseif selected == "Tiny" then
                    p.Color = data.Color
                    p.Material = Enum.Material.SmoothPlastic
                    p.Reflectance = 0.1

                elseif selected == "Tranquil" then
                    p.Color = data.Color
                    p.Material = Enum.Material.Neon
                    p.Reflectance = 0.3

                elseif selected == "IronSkin" then
                    p.Color = data.Color
                    p.Material = Enum.Material.Metal
                    p.Reflectance = 0.5

                elseif selected == "Radiant" then
                    p.Color = data.Color
                    p.Material = Enum.Material.Neon
                    p.Reflectance = 0.4

                elseif selected == "Rainbow" then
                    -- Make rainbow effect: cycle colors every heartbeat
                    local rainbowColors = {
                        Color3.fromRGB(255, 0, 0),
                        Color3.fromRGB(255, 127, 0),
                        Color3.fromRGB(255, 255, 0),
                        Color3.fromRGB(0, 255, 0),
                        Color3.fromRGB(0, 0, 255),
                        Color3.fromRGB(75, 0, 130),
                        Color3.fromRGB(148, 0, 211),
                    }
                    local idx = 1
                    RunService.Heartbeat:Connect(function()
                        if p and p.Parent then
                            p.Color = rainbowColors[idx]
                            idx = idx + 1
                            if idx > #rainbowColors then idx = 1 end
                        end
                    end)
                    p.Material = Enum.Material.Neon
                    p.Reflectance = 0.5

                elseif selected == "Shocked" then
                    p.Color = data.Color
                    p.Material = Enum.Material.Neon
                    p.Reflectance = 0.5

                elseif selected == "Ascended" then
                    p.Color = data.Color
                    p.Material = Enum.Material.Neon
                    p.Reflectance = 0.6
                else
                    -- default color/material
                    p.Color = data.Color
                    p.Material = Enum.Material.Plastic
                    p.Reflectance = 0
                end
            end
        end
        statusLabel.Text = "Status: Mutation applied successfully!"
    else
        statusLabel.Text = "Status: Unknown mutation!"
    end
end)

-- Live update pet status while holding
RunService.Heartbeat:Connect(function()
    local heldPet = getHeldPet()
    if heldPet then
        statusLabel.Text = "Status: Holding pet: " .. heldPet.Name
    end
end)
