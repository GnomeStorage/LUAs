--!strict
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

local petModelsFolder = ReplicatedStorage:WaitForChild("Pets")

-- Mutation data from Grow a Garden wiki
local Mutations = {
    ["Shiny"] = function(pet)
        -- simple example: increase brightness/gloss
        for _, part in ipairs(pet:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Material = Enum.Material.Neon
                part.Color = Color3.fromRGB(255, 255, 255)
                part.Transparency = 0
            end
            if part:IsA("ParticleEmitter") or part:IsA("Light") then
                part.Enabled = true
            end
        end
    end,
    ["Frozen"] = function(pet)
        -- make pet icy blue and semi-transparent
        for _, part in ipairs(pet:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Material = Enum.Material.Ice
                part.Color = Color3.fromRGB(150, 200, 255)
                part.Transparency = 0.3
            end
        end
    end,
    ["Windy"] = function(pet)
        -- add some particle effects for wind (if none, just color change)
        for _, part in ipairs(pet:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Material = Enum.Material.SmoothPlastic
                part.Color = Color3.fromRGB(180, 220, 255)
                part.Transparency = 0
            end
        end
        -- optionally add a particle emitter (if you want, add here)
    end,
    ["Golden"] = function(pet)
        for _, part in ipairs(pet:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Material = Enum.Material.Metal
                part.Color = Color3.fromRGB(255, 215, 0)
                part.Transparency = 0
            end
        end
    end,
    ["Mega"] = function(pet)
        -- scale pet bigger
        pet:SetPrimaryPartCFrame(pet.PrimaryPart.CFrame)
        pet.PrimaryPart.Size = pet.PrimaryPart.Size * 1.5
        for _, part in ipairs(pet:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Size = part.Size * 1.5
            end
        end
    end,
    ["Tiny"] = function(pet)
        -- scale pet smaller
        pet:SetPrimaryPartCFrame(pet.PrimaryPart.CFrame)
        pet.PrimaryPart.Size = pet.PrimaryPart.Size * 0.5
        for _, part in ipairs(pet:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Size = part.Size * 0.5
            end
        end
    end,
    ["Tranquil"] = function(pet)
        for _, part in ipairs(pet:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Material = Enum.Material.Glass
                part.Transparency = 0.5
                part.Color = Color3.fromRGB(100, 200, 255)
            end
        end
    end,
    ["Corrupted"] = function(pet)
        for _, part in ipairs(pet:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Material = Enum.Material.Slate
                part.Color = Color3.fromRGB(120, 30, 30)
                part.Transparency = 0.2
            end
        end
    end,
    ["IronSkin"] = function(pet)
        for _, part in ipairs(pet:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Material = Enum.Material.Metal
                part.Color = Color3.fromRGB(90, 90, 90)
                part.Transparency = 0
            end
        end
    end,
    ["Radiant"] = function(pet)
        for _, part in ipairs(pet:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Material = Enum.Material.Neon
                part.Color = Color3.fromRGB(255, 140, 0)
                part.Transparency = 0
            end
        end
    end,
    ["Rainbow"] = function(pet)
        local colors = {
            Color3.fromRGB(255, 0, 0),
            Color3.fromRGB(255, 127, 0),
            Color3.fromRGB(255, 255, 0),
            Color3.fromRGB(0, 255, 0),
            Color3.fromRGB(0, 0, 255),
            Color3.fromRGB(75, 0, 130),
            Color3.fromRGB(148, 0, 211)
        }
        local index = 1
        for _, part in ipairs(pet:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Material = Enum.Material.Neon
                part.Color = colors[index]
                index = index + 1
                if index > #colors then
                    index = 1
                end
            end
        end
    end,
    ["Shocked"] = function(pet)
        for _, part in ipairs(pet:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Material = Enum.Material.Neon
                part.Color = Color3.fromRGB(255, 255, 255)
                part.Transparency = 0
            end
        end
        -- optionally add sparks particles or light effects here
    end,
    ["Ascended"] = function(pet)
        for _, part in ipairs(pet:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Material = Enum.Material.ForceField
                part.Transparency = 0.1
                part.Color = Color3.fromRGB(255, 255, 255)
            end
        end
    end,
}

-- Remove "Inverted" because colors vary and are complex
local mutationNames = {}
for name, _ in pairs(Mutations) do
    table.insert(mutationNames, name)
end
table.sort(mutationNames)

-- UI setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "PetMutatorUI"
ScreenGui.Parent = player:WaitForChild("PlayerGui")

local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 300, 0, 220)
MainFrame.Position = UDim2.new(0.5, -150, 0.3, 0)
MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MainFrame.BorderSizePixel = 0
MainFrame.Parent = ScreenGui

local TitleLabel = Instance.new("TextLabel")
TitleLabel.Size = UDim2.new(1, 0, 0, 35)
TitleLabel.BackgroundTransparency = 1
TitleLabel.Text = "Bacon Scripts\nPET MUTATOR"
TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleLabel.Font = Enum.Font.SourceSansBold
TitleLabel.TextSize = 18
TitleLabel.Parent = MainFrame

-- Dropdown Button
local dropdownOpen = false
local SelectedMutation = mutationNames[1] or "None"

local DropdownButton = Instance.new("TextButton")
DropdownButton.Size = UDim2.new(1, 0, 0, 30)
DropdownButton.Position = UDim2.new(0, 0, 0, 40)
DropdownButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
DropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
DropdownButton.Font = Enum.Font.SourceSans
DropdownButton.TextSize = 16
DropdownButton.Text = "Selected: "..SelectedMutation.." ▼"
DropdownButton.Parent = MainFrame

local DropdownFrame = Instance.new("Frame")
DropdownFrame.Size = UDim2.new(1, 0, 0, 150)
DropdownFrame.Position = UDim2.new(0, 0, 0, 70)
DropdownFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
DropdownFrame.Visible = false
DropdownFrame.ClipsDescendants = true
DropdownFrame.Parent = MainFrame

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Parent = DropdownFrame
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Padding = UDim.new(0, 2)

for _, name in ipairs(mutationNames) do
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, -10, 0, 30)
    btn.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    btn.Font = Enum.Font.SourceSans
    btn.TextSize = 16
    btn.Text = name
    btn.Parent = DropdownFrame

    btn.MouseButton1Click:Connect(function()
        SelectedMutation = name
        DropdownButton.Text = "Selected: "..name.." ▼"
        DropdownFrame.Visible = false
        dropdownOpen = false
    end)
end

DropdownButton.MouseButton1Click:Connect(function()
    dropdownOpen = not dropdownOpen
    DropdownFrame.Visible = dropdownOpen
end)

-- Mutate Button
local MutateButton = Instance.new("TextButton")
MutateButton.Size = UDim2.new(1, 0, 0, 40)
MutateButton.Position = UDim2.new(0, 0, 0, 230)
MutateButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
MutateButton.TextColor3 = Color3.fromRGB(255, 255, 255)
MutateButton.Font = Enum.Font.SourceSansBold
MutateButton.TextSize = 18
MutateButton.Text = "Click to Mutate Pet"
MutateButton.Parent = MainFrame

-- Status Label
local StatusLabel = Instance.new("TextLabel")
StatusLabel.Size = UDim2.new(1, 0, 0, 30)
StatusLabel.Position = UDim2.new(0, 0, 1, -35)
StatusLabel.BackgroundTransparency = 1
StatusLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
StatusLabel.Font = Enum.Font.SourceSans
StatusLabel.TextSize = 16
StatusLabel.Text = "Status: No pet held!"
StatusLabel.Parent = MainFrame

-- Helper: build pet lookup table
local petModels = {}
for _, pet in ipairs(petModelsFolder:GetChildren()) do
    petModels[pet.Name:lower()] = pet
end

-- Find held pet recursively, allowing mutation prefix removal
local function findPetInDescendants(parent)
    local prefixes = {"golden ", "shiny ", "rainbow ", "mega ", "tiny ", "tranquil ", "corrupted ", "frozen ", "windy ", "ironskin ", "radiant ", "shocked ", "ascended "}
    for _, obj in ipairs(parent:GetDescendants()) do
        if obj:IsA("Model") and obj:FindFirstChildWhichIsA("BasePart") then
            local lname = obj.Name:lower()
            -- Remove prefixes
            for _, prefix in ipairs(prefixes) do
                if lname:sub(1, #prefix) == prefix then
                    lname = lname:sub(#prefix + 1)
                    break
                end
            end
            if petModels[lname] then
                return obj
            end
        end
    end
    return nil
end

local function getHeldPet()
    if player.Character then
        return findPetInDescendants(player.Character)
    end
    return nil
end

-- Get pet info (name, weight, age)
local function getPetInfo(pet)
    local name = pet.Name or "Unknown"
    local weight = "N/A"
    local age = "N/A"

    -- Check if Weight and Age are stored as values in the pet model
    local weightVal = pet:FindFirstChild("Weight") or pet:FindFirstChild("KG")
    if weightVal and weightVal:IsA("NumberValue") then
        weight = string.format("%.2f KG", weightVal.Value)
    elseif pet:FindFirstChild("Weight") and pet.Weight:IsA("NumberValue") then
        weight = string.format("%.2f KG", pet.Weight.Value)
    end

    local ageVal = pet:FindFirstChild("Age")
    if ageVal and ageVal:IsA("IntValue") then
        age = ageVal.Value
    end

    return name, weight, age
end

-- Reset mutation visuals before applying new mutation
local function resetMutationVisuals(pet)
    for _, part in ipairs(pet:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Material = Enum.Material.Plastic
            part.Color = Color3.fromRGB(255, 255, 255)
            part.Transparency = 0
        end
        if part:IsA("ParticleEmitter") or part:IsA("Light") then
            part.Enabled = false
        end
    end
    -- Reset size if Mega/Tiny was applied previously
    if pet.PrimaryPart then
        pet.PrimaryPart.Size = pet.PrimaryPart.Size
        for _, part in ipairs(pet:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Size = part.Size
            end
        end
    end
end

-- Apply the selected mutation to pet visuals
local function applyMutation(pet, mutationName)
    if not pet or not mutationName then return end
    resetMutationVisuals(pet)

    local func = Mutations[mutationName]
    if func then
        func(pet)
    end
end

-- Update status label periodically
RunService.Heartbeat:Connect(function()
    local pet = getHeldPet()
    if pet then
        local name, weight, age = getPetInfo(pet)
        StatusLabel.Text = ("Status: Holding pet: %s [%s] [Age %s]"):format(name, weight, age)
    else
        StatusLabel.Text = "Status: No pet held!"
    end
end)

-- Mutate button click handler
MutateButton.MouseButton1Click:Connect(function()
    local pet = getHeldPet()
    if pet then
        applyMutation(pet, SelectedMutation)
    else
        StatusLabel.Text = "Status: No pet held!"
    end
end)

print("Pet Mutator UI loaded successfully!")
