-- CONSTANTS
local Players = game:GetService("Players")
local Replicated = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

-- GATHER ALL PET MODEL NAMES
local petModels = {}
if Replicated:FindFirstChild("Pets") then
    for _, mdl in ipairs(Replicated.Pets:GetChildren()) do
        petModels[mdl.Name:lower()] = true
    end
end

-- MUTATION DATA (example)
local mutationData = {
    Inverted = { Prefix = "Inverted ", Color = Color3.fromRGB(0, 255, 255) },
    Radiant = { Prefix = "Radiant ", Color = Color3.fromRGB(255, 255, 0) },
    Golden = { Prefix = "Golden ", Color = Color3.fromRGB(255, 215, 0) },
    -- Add more as needed...
}

local mutationMap = {} for k in pairs(mutationData) do table.insert(mutationMap, k) end

-- GUI Setup
local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
screenGui.Name = "PetMutatorUI"
screenGui.ResetOnSpawn = false

local mainFrame = Instance.new("Frame", screenGui)
mainFrame.Size = UDim2.new(0, 320, 0, 260)
mainFrame.Position = UDim2.new(0.5, -160, 0.3, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
mainFrame.Active, mainFrame.Draggable = true, true
Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0, 8)

local title = Instance.new("TextLabel", mainFrame)
title.Size = UDim2.new(1, 0, 0, 50)
title.Text = "Bacon Scripts\nPET MUTATOR"
title.Font, title.TextSize = Enum.Font.SourceSansBold, 20
title.TextColor3 = Color3.new(1, 1, 1)
title.BackgroundTransparency = 1

local mutateButton = Instance.new("TextButton", mainFrame)
mutateButton.Size = UDim2.new(1, -20, 0, 30)
mutateButton.Position = UDim2.new(0, 10, 0, 60)
mutateButton.Text = "Click to Mutate Pet"
mutateButton.Font, mutateButton.TextSize = Enum.Font.SourceSansBold, 18
mutateButton.BackgroundColor3 = Color3.fromRGB(90, 90, 90)
mutateButton.TextColor3 = Color3.new(1, 1, 1)

local dropdownLabel = Instance.new("TextLabel", mainFrame)
dropdownLabel.Size = UDim2.new(1, -20, 0, 25)
dropdownLabel.Position = UDim2.new(0, 10, 0, 100)
dropdownLabel.Text = "Selected: None"
dropdownLabel.Font, dropdownLabel.TextSize = Enum.Font.SourceSans, 16
dropdownLabel.TextColor3 = Color3.new(1, 1, 1)
dropdownLabel.BackgroundColor3 = Color3.fromRGB(60, 60, 60)

local scrollFrame = Instance.new("ScrollingFrame", mainFrame)
scrollFrame.Size = UDim2.new(1, -20, 0, 120)
scrollFrame.Position = UDim2.new(0, 10, 0, 130)
scrollFrame.CanvasSize = UDim2.new(0, 0, 0, #mutationMap * 24)
scrollFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
scrollFrame.BorderSizePixel = 0
local uiList = Instance.new("UIListLayout", scrollFrame)
uiList.Padding = UDim.new(0, 2)
uiList.FillDirection = Enum.FillDirection.Vertical

local statusLabel = Instance.new("TextLabel", mainFrame)
statusLabel.Size, statusLabel.Position = UDim2.new(1, -20, 0, 30), UDim2.new(0, 10, 0, 255)
statusLabel.Text = "Status: Waiting..."
statusLabel.Font, statusLabel.TextSize = Enum.Font.SourceSans, 16
statusLabel.TextColor3 = Color3.new(1, 1, 1)
statusLabel.BackgroundTransparency = 1

-- Mutation Dropdown Buttons
local selected = nil
for _, mut in ipairs(mutationMap) do
    local btn = Instance.new("TextButton", scrollFrame)
    btn.Size = UDim2.new(1, 0, 0, 24)
    btn.Text = mut
    btn.Font, btn.TextSize = Enum.Font.SourceSans, 16
    btn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.MouseButton1Click:Connect(function()
        selected = mut
        dropdownLabel.Text = "Selected: " .. mut
    end)
end

-- Pet Detection
local function getHeldPet()
    local char = player.Character
    if not char then return nil end

    -- First check Tools with Models
    for _, tool in ipairs(char:GetChildren()) do
        if tool:IsA("Tool") then
            local petModel = tool:FindFirstChildWhichIsA("Model")
            if petModel and petModels[petModel.Name:lower()] then
                return petModel
            elseif petModels[tool.Name:lower()] then
                return tool
            end
        end
    end

    -- Also check for Models directly in the character
    for _, obj in ipairs(char:GetChildren()) do
        if obj:IsA("Model") and petModels[obj.Name:lower()] then
            return obj
        end
    end

    return nil
end

-- Mutation Logic
mutateButton.MouseButton1Click:Connect(function()
    local pet = getHeldPet()
    if not pet then
        statusLabel.Text = "Status: No pet held!"
        return
    end
    if not selected then
        statusLabel.Text = "Status: No mutation selected!"
        return
    end

    local data = mutationData[selected]
    if data then
        -- Rename pet
        pet.Name = data.Prefix .. pet.Name:gsub("^%w+ ", "")

        -- Colorize all BaseParts
        for _, p in ipairs(pet:GetDescendants()) do
            if p:IsA("BasePart") then
                p.Color = data.Color
                p.Material = Enum.Material.Metal
            end
        end

        -- Optionally: mark it with attribute (so game can recognize it's mutated)
        pet:SetAttribute("Mutation", selected)

        statusLabel.Text = "Status: Applied " .. selected .. " to " .. pet.Name
    end
end)

-- Live UI Update
local lastStatusUpdate = 0
local statusCooldown = 2

RunService.Heartbeat:Connect(function(dt)
    lastStatusUpdate = lastStatusUpdate + dt
    if lastStatusUpdate >= statusCooldown then
        local pet = getHeldPet()
        if pet then
            statusLabel.Text = "Status: Holding pet: " .. pet.Name
        else
            statusLabel.Text = "Status: No pet held!"
        end
    end
end)
