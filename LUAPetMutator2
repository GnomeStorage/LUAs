-- Bacon Scripts Pet Mutator (Visual-Only)
-- GUI now includes: Minimize & Close buttons + Soft Color Scheme Matching Egg Randomizer

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local heldPet = nil
local selectedMutation = nil
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "PetMutatorGUI"
screenGui.Parent = player:WaitForChild("PlayerGui")
screenGui.ResetOnSpawn = false

-- [GUI Setup: frame, title, close/minimize buttons omitted for brevity, assumed same as before]

-- Mutation button
local mutateButton = Instance.new("TextButton")
mutateButton.Size = UDim2.new(1, -20, 0, 30)
mutateButton.Position = UDim2.new(0, 10, 0, 110 + #mutations * 20 + 10)
mutateButton.BackgroundColor3 = Color3.fromRGB(90, 60, 40)
mutateButton.Text = "Mutate Pet"
mutateButton.TextColor3 = Color3.new(1,1,1)
mutateButton.Font = Enum.Font.GothamBold
mutateButton.TextSize = 16
mutateButton.Parent = mainFrame

-- Loading bar
local loadingBar = Instance.new("Frame")
loadingBar.Size = UDim2.new(0, 0, 0, 6)
loadingBar.Position = UDim2.new(0, 10, 1, -40)
loadingBar.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
loadingBar.BorderSizePixel = 0
loadingBar.Visible = false
loadingBar.Parent = mainFrame

-- Mutation success popup
local successPopup = Instance.new("TextLabel")
successPopup.Size = UDim2.new(1, 0, 0, 30)
successPopup.Position = UDim2.new(0, 0, 0, -40)
successPopup.BackgroundColor3 = Color3.fromRGB(60, 200, 60)
successPopup.Text = "Mutation Success!"
successPopup.Font = Enum.Font.GothamBold
successPopup.TextColor3 = Color3.new(1, 1, 1)
successPopup.TextSize = 18
successPopup.Visible = false
successPopup.Parent = mainFrame

local function applyMutationEffect(petModel, mutation)
	if not petModel then return end
	-- Clear existing auras
	for _, v in pairs(petModel:GetChildren()) do
		if v:IsA("ParticleEmitter") or v.Name:match("Aura") then v:Destroy() end
	end
	-- Apply mutation-based visual effect
	if mutation == "Shiny" then
		local shine = Instance.new("ParticleEmitter")
		shine.Texture = "rbxassetid://11747293362"
		shine.Rate = 6
		shine.Lifetime = NumberRange.new(0.6)
		shine.Parent = petModel.PrimaryPart or petModel:FindFirstChildWhichIsA("BasePart")
	elseif mutation == "Mega" then
		petModel:SetPrimaryPartCFrame(petModel:GetPrimaryPartCFrame())
		petModel.PrimaryPart.Size *= 1.5
	elseif mutation == "Frozen" then
		for _, part in pairs(petModel:GetDescendants()) do
			if part:IsA("BasePart") then
				part.Color = Color3.fromRGB(150, 200, 255)
			end
		end
	-- Add more mutations here
	end
end

mutateButton.MouseButton1Click:Connect(function()
	if not heldPet or not selectedMutation then return end
	loadingBar.Visible = true
	loadingBar.Size = UDim2.new(0, 0, 0, 6)
	TweenService:Create(loadingBar, TweenInfo.new(7), {Size = UDim2.new(1, -20, 0, 6)}):Play()
	wait(7)
	loadingBar.Visible = false
	
	-- Rename pet tool
	heldPet.Name = selectedMutation .. " " .. heldPet.Name
	
	-- Apply effect to model visually
	if heldPet:FindFirstChild("Pet") and heldPet.Pet:IsA("Model") then
		applyMutationEffect(heldPet.Pet, selectedMutation)
	end
	
	successPopup.Visible = true
	TweenService:Create(successPopup, TweenInfo.new(2), {TextTransparency = 1, BackgroundTransparency = 1}):Play()
	wait(2)
	successPopup.Visible = false
	successPopup.TextTransparency = 0
	successPopup.BackgroundTransparency = 0
end)

RunService.RenderStepped:Connect(function()
	updateHeldPet()
end)

-- Dropdown for mutations
local mutationDropdown = Instance.new("TextButton")
mutationDropdown.Size = UDim2.new(1, -20, 0, 25)
mutationDropdown.Position = mutateButton.Position + UDim2.new(0, 0, 0, 40)
mutationDropdown.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
mutationDropdown.Text = "Select Mutation"
mutationDropdown.TextColor3 = Color3.new(1,1,1)
mutationDropdown.Font = Enum.Font.Gotham
mutationDropdown.TextSize = 14
mutationDropdown.Parent = mainFrame

-- Holder for dropdown options
local dropdownFrame = Instance.new("Frame")
dropdownFrame.Size = UDim2.new(1, -20, 0, 150)
dropdownFrame.Position = mutationDropdown.Position + UDim2.new(0, 0, 0, 25)
dropdownFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
dropdownFrame.Visible = false
dropdownFrame.ClipsDescendants = true
dropdownFrame.Parent = mainFrame

-- Scrollable list
local scrolling = Instance.new("ScrollingFrame")
scrolling.Size = UDim2.new(1, 0, 1, 0)
scrolling.CanvasSize = UDim2.new(0, 0, 0, 0)
scrolling.ScrollBarThickness = 4
scrolling.BackgroundTransparency = 1
scrolling.Parent = dropdownFrame

-- List layout
local layout = Instance.new("UIListLayout")
layout.SortOrder = Enum.SortOrder.LayoutOrder
layout.Padding = UDim.new(0, 4)
layout.Parent = scrolling

-- Available mutation types (abbreviated set for example)
local mutationList = {
	"Shiny", "Inverted", "Frozen", "Windy", "Golden",
	"Mega", "Tiny", "Tranquil", "Corrupted", "IronSkin",
	"Radiant", "Rainbow", "Shocked", "Ascended"
}

for _, mut in ipairs(mutationList) do
	local btn = Instance.new("TextButton")
	btn.Size = UDim2.new(1, -8, 0, 24)
	btn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
	btn.Text = mut
	btn.Font = Enum.Font.Gotham
	btn.TextColor3 = Color3.new(1,1,1)
	btn.TextSize = 13
	btn.Parent = scrolling
	btn.MouseButton1Click:Connect(function()
		selectedMutation = mut
		mutationDropdown.Text = mut
		dropdownFrame.Visible = false
	end)
end

scrolling.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y)

mutationDropdown.MouseButton1Click:Connect(function()
	dropdownFrame.Visible = not dropdownFrame.Visible
end)

-- Held pet info label
local petInfo = Instance.new("TextLabel")
petInfo.Size = UDim2.new(1, -20, 0, 22)
petInfo.Position = UDim2.new(0, 10, 0, 70)
petInfo.BackgroundTransparency = 1
petInfo.Text = "Held: None"
petInfo.Font = Enum.Font.Gotham
petInfo.TextColor3 = Color3.fromRGB(255, 255, 255)
petInfo.TextSize = 14
petInfo.TextXAlignment = Enum.TextXAlignment.Left
petInfo.Parent = mainFrame

-- Detect held pet tool and update label
function updateHeldPet()
	local tool = player.Character and player.Character:FindFirstChildOfClass("Tool")
	if tool and tool:FindFirstChild("Pet") then
		local name = tool.Name
		local kgValue = tool:FindFirstChild("KG")
		local kgText = kgValue and (" - " .. tostring(kgValue.Value) .. "kg") or ""
		heldPet = tool
		petInfo.Text = "Held: " .. name .. kgText
	else
		heldPet = nil
		petInfo.Text = "Held: None"
	end
end

