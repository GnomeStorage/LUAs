--// Setup GUI
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
screenGui.Name = "PetMutatorUI"
screenGui.ResetOnSpawn = false

local mainFrame = Instance.new("Frame", screenGui)
mainFrame.Size = UDim2.new(0, 300, 0, 230)
mainFrame.Position = UDim2.new(0.5, -150, 0.3, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
mainFrame.Active = true
mainFrame.Draggable = true

local uiCorner = Instance.new("UICorner", mainFrame)
uiCorner.CornerRadius = UDim.new(0, 8)

local title = Instance.new("TextLabel", mainFrame)
title.Size = UDim2.new(1, 0, 0, 50)
title.Text = "Bacon Scripts\nPET MUTATOR"
title.Font = Enum.Font.SourceSansBold
title.TextSize = 20
title.TextColor3 = Color3.new(1, 1, 1)
title.BackgroundTransparency = 1

local mutateButton = Instance.new("TextButton", mainFrame)
mutateButton.Size = UDim2.new(1, -20, 0, 30)
mutateButton.Position = UDim2.new(0, 10, 0, 60)
mutateButton.Text = "Click to Mutate Pet"
mutateButton.Font = Enum.Font.SourceSansBold
mutateButton.TextSize = 18
mutateButton.BackgroundColor3 = Color3.fromRGB(90, 90, 90)
mutateButton.TextColor3 = Color3.new(1, 1, 1)

local dropdown = Instance.new("TextButton", mainFrame)
dropdown.Size = UDim2.new(1, -20, 0, 30)
dropdown.Position = UDim2.new(0, 10, 0, 100)
dropdown.Text = "Select Mutation"
dropdown.Font = Enum.Font.SourceSans
dropdown.TextSize = 18
dropdown.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
dropdown.TextColor3 = Color3.new(1, 1, 1)

local optionsFrame = Instance.new("Frame", mainFrame)
optionsFrame.Size = UDim2.new(1, -20, 0, 120)
optionsFrame.Position = UDim2.new(0, 10, 0, 135)
optionsFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
optionsFrame.Visible = false
optionsFrame.ClipsDescendants = true

local uiList = Instance.new("UIListLayout", optionsFrame)
uiList.FillDirection = Enum.FillDirection.Vertical
uiList.Padding = UDim.new(0, 2)

local status = Instance.new("TextLabel", mainFrame)
status.Size = UDim2.new(1, -20, 0, 20)
status.Position = UDim2.new(0, 10, 0, 210)
status.Text = "Status: Waiting..."
status.Font = Enum.Font.SourceSans
status.TextSize = 16
status.TextColor3 = Color3.new(1, 1, 1)
status.BackgroundTransparency = 1

--// Mutation Data
local mutationMap = {
	Golden = {Prefix = "Golden ", Color = Color3.fromRGB(255, 215, 0)},
	Shiny = {Prefix = "Shiny ", Color = Color3.fromRGB(173, 216, 230)},
	Rainbow = {Prefix = "Rainbow ", Color = Color3.fromRGB(255, 0, 255)},
	Mega = {Prefix = "Mega ", Color = Color3.fromRGB(255, 150, 100)},
	Tiny = {Prefix = "Tiny ", Color = Color3.fromRGB(180, 180, 180)},
	Tranquil = {Prefix = "Tranquil ", Color = Color3.fromRGB(102, 204, 255)},
	Corrupted = {Prefix = "Corrupted ", Color = Color3.fromRGB(75, 0, 130)},
	Inverted = {Prefix = "Inverted ", Color = Color3.fromRGB(255, 255, 255)},
	Frozen = {Prefix = "Frozen ", Color = Color3.fromRGB(140, 220, 255)},
	Windy = {Prefix = "Windy ", Color = Color3.fromRGB(210, 255, 255)},
	IronSkin = {Prefix = "IronSkin ", Color = Color3.fromRGB(200, 200, 200)},
	Radiant = {Prefix = "Radiant ", Color = Color3.fromRGB(255, 255, 153)},
	Shocked = {Prefix = "Shocked ", Color = Color3.fromRGB(255, 255, 102)},
	Ascended = {Prefix = "Ascended ", Color = Color3.fromRGB(255, 240, 200)},
}

local selectedMutation = nil

--// Dropdown Logic
dropdown.MouseButton1Click:Connect(function()
	optionsFrame.Visible = not optionsFrame.Visible
end)

for mutName, mutData in pairs(mutationMap) do
	local btn = Instance.new("TextButton", optionsFrame)
	btn.Size = UDim2.new(1, 0, 0, 20)
	btn.Text = mutName
	btn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
	btn.TextColor3 = Color3.new(1, 1, 1)
	btn.Font = Enum.Font.SourceSans
	btn.TextSize = 16

	btn.MouseButton1Click:Connect(function()
		selectedMutation = mutName
		dropdown.Text = mutName
		optionsFrame.Visible = false
	end)
end

--// Get Held Pet (Improved)
local function getHeldPet()
	local char = player.Character
	if not char then return nil end
	for _, obj in pairs(char:GetChildren()) do
		if obj:IsA("Model") and obj:FindFirstChildWhichIsA("BasePart") then
			if obj:FindFirstChild("PetTag") or obj.Name:lower():find("bee") or obj.Name:lower():find("raccoon") then
				return obj
			end
		end
	end
	return nil
end

--// Apply Mutation
mutateButton.MouseButton1Click:Connect(function()
	local pet = getHeldPet()
	if not pet then
		status.Text = "Status: No pet held!"
		return
	end
	if not selectedMutation then
		status.Text = "Status: No mutation selected!"
		return
	end

	local data = mutationMap[selectedMutation]
	if not data then
		status.Text = "Status: Invalid mutation!"
		return
	end

	-- Rename without double prefixing
	local baseName = pet.Name:gsub("^%w+ ", "")
	pet.Name = data.Prefix .. baseName

	for _, part in ipairs(pet:GetDescendants()) do
		if part:IsA("BasePart") then
			part.Color = data.Color
			part.Material = Enum.Material.Metal
		end
	end

	status.Text = "Status: Applied " .. selectedMutation .. "!"
end)
