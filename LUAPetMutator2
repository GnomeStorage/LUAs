local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

-- Mutation definitions
local mutationData = {
    Golden     = { Prefix = "Golden ", Color = Color3.fromRGB(255, 215, 0) },
    Shiny      = { Prefix = "Shiny ", Color = Color3.fromRGB(0, 255, 255) },
    Rainbow    = { Prefix = "Rainbow ", Color = Color3.fromRGB(255, 0, 255) },
    Mega       = { Prefix = "Mega ", Color = Color3.fromRGB(255, 100, 100) },
    Tiny       = { Prefix = "Tiny ", Color = Color3.fromRGB(150, 150, 150) },
    Tranquil   = { Prefix = "Tranquil ", Color = Color3.fromRGB(100, 200, 255) },
    Corrupted  = { Prefix = "Corrupted ", Color = Color3.fromRGB(80, 0, 120) },
    Inverted   = { Prefix = "Inverted ", Color = Color3.fromRGB(0, 255, 255) },
    Frozen     = { Prefix = "Frozen ", Color = Color3.fromRGB(150, 200, 255) },
    Windy      = { Prefix = "Windy ", Color = Color3.fromRGB(170, 255, 200) },
    IronSkin   = { Prefix = "IronSkin ", Color = Color3.fromRGB(120, 120, 120) },
    Radiant    = { Prefix = "Radiant ", Color = Color3.fromRGB(255, 255, 0) },
    Shocked    = { Prefix = "Shocked ", Color = Color3.fromRGB(255, 255, 150) },
    Ascended   = { Prefix = "Ascended ", Color = Color3.fromRGB(255, 255, 255) },
}

local selected = nil

-- GUI Setup
local screenGui = Instance.new("ScreenGui", player:WaitForChild("PlayerGui"))
screenGui.Name = "PetMutatorUI"
screenGui.ResetOnSpawn = false

local mainFrame = Instance.new("Frame", screenGui)
mainFrame.Size = UDim2.new(0, 300, 0, 320)
mainFrame.Position = UDim2.new(0.5, -150, 0.3, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
mainFrame.Active = true
mainFrame.Draggable = true
Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0, 8)

local title = Instance.new("TextLabel", mainFrame)
title.Size = UDim2.new(1, 0, 0, 50)
title.Text = "Bacon Scripts\nPET MUTATOR"
title.Font = Enum.Font.SourceSansBold
title.TextSize = 20
title.TextColor3 = Color3.new(1, 1, 1)
title.BackgroundTransparency = 1

local mutateButton = Instance.new("TextButton", mainFrame)
mutateButton.Size = UDim2.new(1, -20, 0, 30)
mutateButton.Position = UDim2.new(0, 10, 0, 60)
mutateButton.Text = "Click to Mutate Pet"
mutateButton.Font = Enum.Font.SourceSansBold
mutateButton.TextSize = 18
mutateButton.BackgroundColor3 = Color3.fromRGB(90, 90, 90)
mutateButton.TextColor3 = Color3.new(1, 1, 1)

local dropdownLabel = Instance.new("TextLabel", mainFrame)
dropdownLabel.Size = UDim2.new(1, -20, 0, 25)
dropdownLabel.Position = UDim2.new(0, 10, 0, 100)
dropdownLabel.Text = "Selected: None"
dropdownLabel.Font = Enum.Font.SourceSans
dropdownLabel.TextSize = 16
dropdownLabel.TextColor3 = Color3.new(1, 1, 1)
dropdownLabel.BackgroundColor3 = Color3.fromRGB(60, 60, 60)

local scrollFrame = Instance.new("ScrollingFrame", mainFrame)
scrollFrame.Size = UDim2.new(1, -20, 0, 150)
scrollFrame.Position = UDim2.new(0, 10, 0, 130)
scrollFrame.CanvasSize = UDim2.new(0, 0, 0, #mutationData * 28)
scrollFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
scrollFrame.BorderSizePixel = 0
scrollFrame.ScrollBarThickness = 6
local uiList = Instance.new("UIListLayout", scrollFrame)
uiList.Padding = UDim.new(0, 4)

local statusLabel = Instance.new("TextLabel", mainFrame)
statusLabel.Size = UDim2.new(1, -20, 0, 30)
statusLabel.Position = UDim2.new(0, 10, 1, -35)
statusLabel.Text = "Status: Waiting..."
statusLabel.Font = Enum.Font.SourceSans
statusLabel.TextSize = 16
statusLabel.TextColor3 = Color3.new(1, 1, 1)
statusLabel.BackgroundTransparency = 1

-- Populate dropdown
for name, _ in pairs(mutationData) do
	local btn = Instance.new("TextButton", scrollFrame)
	btn.Size = UDim2.new(1, 0, 0, 24)
	btn.Text = name
	btn.Font = Enum.Font.SourceSans
	btn.TextSize = 16
	btn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
	btn.TextColor3 = Color3.new(1, 1, 1)

	btn.MouseButton1Click:Connect(function()
		selected = name
		dropdownLabel.Text = "Selected: " .. name
	end)
end

-- Pet Detection
local function getHeldPet()
    local char = player.Character
    if not char then return nil end

    -- Check for Tool
    for _, tool in ipairs(char:GetChildren()) do
        if tool:IsA("Tool") then
            return tool
        end
    end

    -- Check for welded or nearby Models (optional)
    for _, obj in ipairs(workspace:GetChildren()) do
        if obj:IsA("Model") and obj:FindFirstChildWhichIsA("BasePart") then
            if obj:FindFirstChild(player.Name) or obj.Name:lower():find("bee") then
                local part = obj:FindFirstChildWhichIsA("BasePart")
                if (part.Position - char.PrimaryPart.Position).Magnitude < 10 then
                    return obj
                end
            end
        end
    end

    return nil
end

-- Mutation Logic
mutateButton.MouseButton1Click:Connect(function()
	local pet = getHeldPet()
	if not pet then
		statusLabel.Text = "Status: No pet held!"
		return
	end
	if not selected then
		statusLabel.Text = "Status: No mutation selected!"
		return
	end
	local data = mutationData[selected]
	if data then
		pet.Name = data.Prefix .. pet.Name:gsub("^%w+ ", "")
		for _, p in ipairs(pet:GetDescendants()) do
			if p:IsA("BasePart") then
				p.Color = data.Color
				p.Material = Enum.Material.Metal
			end
		end
		statusLabel.Text = "Status: Applied " .. selected
	end
end)

-- Live update pet status
RunService.Heartbeat:Connect(function()
	local heldPet = getHeldPet()
	if heldPet then
		statusLabel.Text = "Status: Holding pet: " .. heldPet.Name
	end
end)
