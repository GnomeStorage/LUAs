-- Minimal Pet Mutator with debug prints and guaranteed UI display

local Players = game:GetService("Players")
local Replicated = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

print("[PetMutator] Starting script")

local playerGui = player:WaitForChild("PlayerGui", 10)
if not playerGui then
    warn("[PetMutator] PlayerGui not found!")
    return
end

-- Build petModels table
local petModels = {}
if Replicated:FindFirstChild("Pets") then
    for _, pet in pairs(Replicated.Pets:GetChildren()) do
        petModels[pet.Name:lower()] = true
    end
else
    warn("[PetMutator] ReplicatedStorage.Pets not found!")
    return
end
print("[PetMutator] Found pet models:", table.concat(table.keys and table.keys(petModels) or {}, ", "))

-- Create simple UI
local screenGui = Instance.new("ScreenGui", playerGui)
screenGui.Name = "PetMutatorUI"

local mainFrame = Instance.new("Frame", screenGui)
mainFrame.Size = UDim2.new(0, 300, 0, 150)
mainFrame.Position = UDim2.new(0.5, -150, 0.3, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(40,40,40)

local statusLabel = Instance.new("TextLabel", mainFrame)
statusLabel.Size = UDim2.new(1, 0, 0, 50)
statusLabel.Position = UDim2.new(0,0,0,0)
statusLabel.Text = "Status: Waiting..."
statusLabel.TextColor3 = Color3.new(1,1,1)
statusLabel.BackgroundTransparency = 1
statusLabel.Font = Enum.Font.SourceSansBold
statusLabel.TextSize = 20

-- Mutation list (simple buttons)
local mutations = {"Golden", "Shiny", "Rainbow"}
local selectedMutation = nil

for i, mut in ipairs(mutations) do
    local btn = Instance.new("TextButton", mainFrame)
    btn.Size = UDim2.new(0.3, -5, 0, 30)
    btn.Position = UDim2.new((i-1)*0.33, 5, 0, 60)
    btn.Text = mut
    btn.BackgroundColor3 = Color3.fromRGB(80,80,80)
    btn.TextColor3 = Color3.new(1,1,1)
    btn.MouseButton1Click:Connect(function()
        selectedMutation = mut
        statusLabel.Text = "Selected mutation: " .. mut
    end)
end

-- Helper: get held pet
local function getHeldPet()
    local char = player.Character
    if not char then return nil end
    for _, child in pairs(char:GetChildren()) do
        if child:IsA("Model") and child:FindFirstChildWhichIsA("BasePart") then
            if petModels[child.Name:lower()] then
                return child
            end
        end
    end
    return nil
end

-- Apply simple mutation (color change)
local function applyMutation(pet, mut)
    local colors = {
        Golden = Color3.fromRGB(255, 215, 0),
        Shiny = Color3.fromRGB(240, 240, 240),
        Rainbow = Color3.fromRGB(255, 0, 255),
    }
    local color = colors[mut]
    if not color then return end
    for _, part in pairs(pet:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Color = color
        end
    end
end

-- Button to mutate pet
local mutateButton = Instance.new("TextButton", mainFrame)
mutateButton.Size = UDim2.new(1, -20, 0, 30)
mutateButton.Position = UDim2.new(0, 10, 0, 110)
mutateButton.Text = "Mutate Held Pet"
mutateButton.BackgroundColor3 = Color3.fromRGB(100,100,100)
mutateButton.TextColor3 = Color3.new(1,1,1)
mutateButton.MouseButton1Click:Connect(function()
    local pet = getHeldPet()
    if not pet then
        statusLabel.Text = "Status: No pet held!"
        print("[PetMutator] No pet held detected.")
        return
    end
    if not selectedMutation then
        statusLabel.Text = "Status: No mutation selected!"
        print("[PetMutator] No mutation selected.")
        return
    end
    applyMutation(pet, selectedMutation)
    statusLabel.Text = "Mutated " .. pet.Name .. " to " .. selectedMutation
    print("[PetMutator] Mutation applied:", selectedMutation)
end)

-- Update statusLabel with held pet info every heartbeat
RunService.Heartbeat:Connect(function()
    local pet = getHeldPet()
    if pet then
        statusLabel.Text = "Holding pet: " .. pet.Name
    end
end)
