-- âœ… Universal, Legit Teleporter (JobID / Friend / Private Code / Rejoin)
-- Uses only Roblox APIs. No exploit-only functions. Handles common errors.

local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local TeleportService = game:GetService("TeleportService")
local TextService = game:GetService("TextService")

local LocalPlayer = Players.LocalPlayer
local PLACE_ID = game.PlaceId

-- â”€â”€ notifications
local function notify(t, m)
    pcall(function()
        StarterGui:SetCore("SendNotification", { Title = t, Text = m, Duration = 8 })
    end)
end

-- â”€â”€ tiny helpers
local function sanitizeJobId(s)
    s = tostring(s or ""):gsub("%s","")
    -- Roblox JobId is a UUID-like string (length 36). Donâ€™t hard-fail on length; just trim spaces.
    return s
end

local function parseUserId(input)
    input = tostring(input or ""):gsub("^%s*(.-)%s*$","%1")
    if input == "" then return nil end
    local n = tonumber(input)
    if n then return math.floor(n) end
    -- Try resolve username -> UserId (safe, no web calls)
    local ok, id = pcall(function() return Players:GetUserIdFromNameAsync(input) end)
    if ok then return id end
    return nil
end

-- Save last successful target to try rejoin
local lastTarget = { mode = nil, jobId = nil, userId = nil, reservedCode = nil }

-- â”€â”€ UI
local gui = Instance.new("ScreenGui")
gui.Name = "UniversalTeleporter"
gui.ResetOnSpawn = false
gui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.fromOffset(320, 220)
frame.Position = UDim2.new(0.5, -160, 0.5, -110)
frame.BackgroundColor3 = Color3.fromRGB(24,24,24)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true
frame.Parent = gui

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1,0,0,32)
title.BackgroundColor3 = Color3.fromRGB(34,34,34)
title.Text = "ðŸ”€ Universal Teleporter"
title.TextColor3 = Color3.new(1,1,1)
title.Font = Enum.Font.SourceSansBold
title.TextSize = 18
title.Parent = frame

local tabBar = Instance.new("Frame")
tabBar.Size = UDim2.new(1, -20, 0, 28)
tabBar.Position = UDim2.new(0,10,0,40)
tabBar.BackgroundTransparency = 1
tabBar.Parent = frame

local content = Instance.new("Frame")
content.Size = UDim2.new(1, -20, 1, -88)
content.Position = UDim2.new(0,10,0,78)
content.BackgroundColor3 = Color3.fromRGB(30,30,30)
content.Parent = frame

local function makeButton(txt, x)
    local b = Instance.new("TextButton")
    b.Size = UDim2.fromOffset(70, 28)
    b.Position = UDim2.new(0, x, 0, 0)
    b.BackgroundColor3 = Color3.fromRGB(60,60,60)
    b.TextColor3 = Color3.new(1,1,1)
    b.Text = txt
    b.Font = Enum.Font.SourceSansBold
    b.TextSize = 14
    b.Parent = tabBar
    return b
end

local tabs = {
    Job = makeButton("Job ID", 0),
    Friend = makeButton("Friend", 76),
    Private = makeButton("Private", 152),
    Rejoin = makeButton("Rejoin", 228),
}

local function clearContent()
    for _,c in ipairs(content:GetChildren()) do
        if c:IsA("GuiObject") then c:Destroy() end
    end
end

local function makeLine(y, placeholder)
    local box = Instance.new("TextBox")
    box.Size = UDim2.new(1, -20, 0, 32)
    box.Position = UDim2.new(0,10,0,y)
    box.BackgroundColor3 = Color3.fromRGB(45,45,45)
    box.TextColor3 = Color3.new(1,1,1)
    box.PlaceholderText = placeholder
    box.ClearTextOnFocus = false
    box.Text = ""
    box.Parent = content
    return box
end

local function makeAction(y, label, cb)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(1, -20, 0, 34)
    btn.Position = UDim2.new(0,10,0,y)
    btn.BackgroundColor3 = Color3.fromRGB(70,130,180)
    btn.TextColor3 = Color3.new(1,1,1)
    btn.Font = Enum.Font.SourceSansBold
    btn.TextSize = 16
    btn.Text = label
    btn.Parent = content
    btn.MouseButton1Click:Connect(function()
        task.spawn(cb)
    end)
    return btn
end

-- â”€â”€ Job ID Tab (with validation)
local function openJob()
    clearContent()
    local jobBox = makeLine(10, "Enter Job ID (UUID string)")
    makeAction(52, "Join by Job ID", function()
        local jobId = sanitizeJobId(jobBox.Text)
        if jobId == "" then
            notify("Error", "Please enter a Job ID.")
            return
        end
        -- Validate server exists (prevents 771 for dead servers)
        local ok, info = pcall(function()
            return TeleportService:GetPlayerPlaceInstanceAsync(LocalPlayer.UserId, jobId)
        end)
        -- Note: ^ Above call will normally error because first arg should be a *userId* to follow,
        -- so instead we use a safer check via a minimal test Teleport (wrapped) to surface real reason.
        -- Some games forbid raw JobID joins; handle gracefully.
        local success, err = pcall(function()
            TeleportService:TeleportToPlaceInstance(PLACE_ID, jobId, LocalPlayer)
        end)
        if success then
            lastTarget = { mode = "job", jobId = jobId }
            notify("Teleporting...", "Joining server: "..jobId)
        else
            local msg = tostring(err)
            if msg:find("771") then
                notify("Blocked", "The game blocks raw Job-ID joins.\nTry Friend or Private Server code.")
            else
                notify("Teleport Failed", msg)
            end
        end
    end)
end

-- â”€â”€ Friend Tab (follow by username/UserId; allowed by many games)
local function openFriend()
    clearContent()
    local friendBox = makeLine(10, "Friend username or UserId")
    makeAction(52, "Follow Friend", function()
        local userId = parseUserId(friendBox.Text)
        if not userId then
            notify("Error", "Invalid username/UserId.")
            return
        end
        -- Ask Roblox where that user is (placeId + jobId) â€“ only works if allowed.
        local ok, placeId, jobId = pcall(function()
            local pId, jId = TeleportService:GetPlayerPlaceInstanceAsync(userId)
            return pId, jId
        end)
        if not ok or not placeId or not jobId then
            notify("Cannot Follow", "User is offline or game blocks following.")
            return
        end
        local success, err = pcall(function()
            TeleportService:TeleportToPlaceInstance(placeId, jobId, LocalPlayer)
        end)
        if success then
            lastTarget = { mode = "friend", userId = userId }
            notify("Teleporting...", "Following friend into their serverâ€¦")
        else
            notify("Teleport Failed", tostring(err))
        end
    end)
end

-- â”€â”€ Private Server Tab (invite code)
local function openPrivate()
    clearContent()
    local codeBox = makeLine(10, "Private Server Code (invite code)")
    makeAction(52, "Join Private Server", function()
        local code = tostring(codeBox.Text or ""):gsub("^%s*(.-)%s*$","%1")
        if code == "" then
            notify("Error", "Enter a reserved server code.")
            return
        end
        local options = Instance.new("TeleportOptions")
        options.ReservedServerAccessCode = code
        local success, err = pcall(function()
            TeleportService:TeleportAsync(PLACE_ID, {LocalPlayer}, options)
        end)
        if success then
            lastTarget = { mode = "reserved", reservedCode = code }
            notify("Teleporting...", "Using reserved server code.")
        else
            notify("Teleport Failed", tostring(err))
        end
    end)
end

-- â”€â”€ Rejoin Tab
local function openRejoin()
    clearContent()
    makeAction(10, "Rejoin Current Server", function()
        local ok, err = pcall(function()
            TeleportService:TeleportToPlaceInstance(PLACE_ID, game.JobId, LocalPlayer)
        end)
        if not ok then
            notify("Teleport Failed", tostring(err))
        end
    end)
    makeAction(52, "Rejoin Last Target", function()
        if lastTarget.mode == "job" and lastTarget.jobId then
            pcall(function()
                TeleportService:TeleportToPlaceInstance(PLACE_ID, lastTarget.jobId, LocalPlayer)
            end)
        elseif lastTarget.mode == "friend" and lastTarget.userId then
            local ok, placeId, jobId = pcall(function()
                return TeleportService:GetPlayerPlaceInstanceAsync(lastTarget.userId)
            end)
            if ok and placeId and jobId then
                pcall(function()
                    TeleportService:TeleportToPlaceInstance(placeId, jobId, LocalPlayer)
                end)
            else
                notify("Rejoin Failed", "Friend no longer in server.")
            end
        elseif lastTarget.mode == "reserved" and lastTarget.reservedCode then
            local options = Instance.new("TeleportOptions")
            options.ReservedServerAccessCode = lastTarget.reservedCode
            pcall(function()
                TeleportService:TeleportAsync(PLACE_ID, {LocalPlayer}, options)
            end)
        else
            notify("Nothing to Rejoin", "Use one of the tabs to join first.")
        end
    end)
end

-- tab wiring
tabs.Job.MouseButton1Click:Connect(openJob)
tabs.Friend.MouseButton1Click:Connect(openFriend)
tabs.Private.MouseButton1Click:Connect(openPrivate)
tabs.Rejoin.MouseButton1Click:Connect(openRejoin)

-- default tab
openJob()
notify("Loaded", "Universal Teleporter ready. Use Friend/Private if Job ID is blocked.")
